# Configuration Tetragon pour observabilité avancée
apiVersion: v1
kind: ConfigMap
metadata:
  name: tetragon-config
  namespace: kube-system
  labels:
    app: tetragon
    component: config
data:
  tetragon.yaml: |
    # Configuration principale Tetragon
    debug: false
    
    # Métriques et observabilité
    metrics-server: ":9090"
    server-address: "localhost:54321"
    
    # Export des événements
    export-filename: "/var/log/tetragon/tetragon.log"
    export-file-max-size-mb: 100
    export-file-max-backups: 5
    export-file-compress: true
    
    # Intégration avec les systèmes de monitoring
    export-allowlist: |
      {"event_set":["PROCESS_EXEC", "PROCESS_EXIT", "PROCESS_KPROBE", "PROCESS_TRACEPOINT"]}
    
    # Configuration gRPC pour intégrations externes  
    grpc-address: "localhost:54321"
    
    # Filtres pour réduction du bruit
    field-filters: |
      [
        {"event_set":["PROCESS_EXEC"], "fields":{"parent_name":["systemd","kthreadd"]}, "action":"EXCLUDE"},
        {"event_set":["PROCESS_EXEC"], "fields":{"process_name":["runc","containerd-shim"]}, "action":"EXCLUDE"}
      ]
    
    # Configuration de performance
    enable-process-cred: true
    enable-process-ns: true
    procfs: "/proc"
    
    # Sécurité
    disable-kprobe-multi: false
    kernel-version: ""
    
    # Logging avancé
    log-level: "info"
    log-format: "json"
    
---
# DaemonSet Tetragon avec configuration sécurisée
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tetragon
  namespace: kube-system
  labels:
    app: tetragon
    component: agent
spec:
  selector:
    matchLabels:
      app: tetragon
  template:
    metadata:
      labels:
        app: tetragon
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tetragon
      hostNetwork: true
      hostPID: true
      hostIPC: false
      
      # Priorité système critique
      priorityClassName: system-node-critical
      
      # Sécurité du pod Tetragon
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: tetragon
        image: quay.io/cilium/tetragon:v1.0.2
        imagePullPolicy: IfNotPresent
        
        # Arguments de démarrage optimisés
        args:
        - --config-file=/etc/tetragon/tetragon.yaml
        - --metrics-server=0.0.0.0:9090
        
        # Variables d'environnement
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: TETRAGON_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
              
        # Configuration de sécurité du conteneur
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
            - SYS_RESOURCE  
            - SYS_PTRACE
            - NET_ADMIN
            - NET_RAW
            - IPC_LOCK
            - AUDIT_CONTROL
            drop:
            - ALL
        
        # Ressources limitées mais suffisantes
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi" 
            cpu: "500m"
            
        # Probes de santé
        livenessProbe:
          httpGet:
            path: /healthz
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
          
        readinessProbe:
          httpGet:
            path: /healthz
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 10
        
        # Montages de volumes critiques
        volumeMounts:
        - name: config
          mountPath: /etc/tetragon
          readOnly: true
        - name: procfs
          mountPath: /proc
          readOnly: true
        - name: sysfs
          mountPath: /sys/fs
          readOnly: true
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: tetragon-logs
          mountPath: /var/log/tetragon
        - name: debugfs
          mountPath: /sys/kernel/debug
          
      # Tolérations pour déploiement sur tous les nœuds
      tolerations:
      - operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoExecute
      - operator: Exists
        key: node.kubernetes.io/not-ready
        
      volumes:
      - name: config
        configMap:
          name: tetragon-config
      - name: procfs
        hostPath:
          path: /proc
          type: Directory
      - name: sysfs
        hostPath:
          path: /sys/fs
          type: Directory
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
      - name: tetragon-logs
        hostPath:
          path: /var/log/tetragon
          type: DirectoryOrCreate
      - name: debugfs
        hostPath:
          path: /sys/kernel/debug
          type: Directory

---
# ServiceAccount avec permissions minimales requises
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tetragon
  namespace: kube-system
automountServiceAccountToken: true

---
# ClusterRole pour accès eBPF et monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tetragon
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["security.istio.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["cilium.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tetragon
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tetragon
subjects:
- kind: ServiceAccount
  name: tetragon
  namespace: kube-system

---
# Service pour exposition des métriques
apiVersion: v1
kind: Service
metadata:
  name: tetragon-metrics
  namespace: kube-system
  labels:
    app: tetragon
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: tetragon